package com.oyosite.ticon.rawlib;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

public class RawStorageBase {
	
	DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
	DocumentBuilder builder;
	
	public RawStorageBase() {
		try {
			builder = factory.newDocumentBuilder();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
	}
	
	

	public Document gameDataBP = builder.newDocument();
	public Document gameDataCreatures = builder.newDocument();
	public Document gameDataItems = builder.newDocument();
	public Document gameDataMaterials = builder.newDocument();
	public Document gameDataCivs = builder.newDocument();
	public Document gameDataRecipe = builder.newDocument();
	public Document gameDataKnowledge = builder.newDocument();
	public Document gameDataPlants = builder.newDocument();
	
	public void injectGameData(Document gameData) {
		
		//System.out.println(gameData.toString());
		
		NodeList BPNodes = gameData.getElementsByTagName("bp");
	    for(int i=0; i<BPNodes.getLength(); i++) {
	    	this.gameDataBP.appendChild(BPNodes.item(i));
	    }
		
		NodeList creatureNodes = gameData.getElementsByTagName("creature");
	    for(int i=0; i<creatureNodes.getLength(); i++) {
	    	System.out.println();
	    	this.gameDataCreatures.appendChild(creatureNodes.item(i));
	    }
	    
	    NodeList ItemNodes = gameData.getElementsByTagName("item");
	    for(int i=0; i<ItemNodes.getLength(); i++) {
	    	this.gameDataItems.appendChild(ItemNodes.item(i));
	    }
	    
	    NodeList MaterialNodes = gameData.getElementsByTagName("material");
	    for(int i=0; i<MaterialNodes.getLength(); i++) {
	    	this.gameDataMaterials.appendChild(MaterialNodes.item(i));
	    }
	    
	    NodeList CivNodes = gameData.getElementsByTagName("civ");
	    for(int i=0; i<CivNodes.getLength(); i++) {
	    	this.gameDataCivs.appendChild(CivNodes.item(i));
	    }
	    
	    NodeList RecipeNodes = gameData.getElementsByTagName("recipe");
	    for(int i=0; i<RecipeNodes.getLength(); i++) {
	    	this.gameDataRecipe.appendChild(RecipeNodes.item(i));
	    }
	    
	    NodeList KnowledgeNodes = gameData.getElementsByTagName("knowledge");
	    for(int i=0; i<KnowledgeNodes.getLength(); i++) {
	    	this.gameDataKnowledge.appendChild(KnowledgeNodes.item(i));
	    }
	    
	    NodeList PlantNodes = gameData.getElementsByTagName("plant");
	    for(int i=0; i<PlantNodes.getLength(); i++) {
	    	this.gameDataPlants.appendChild(PlantNodes.item(i));
	    }
	}
	
	

}
