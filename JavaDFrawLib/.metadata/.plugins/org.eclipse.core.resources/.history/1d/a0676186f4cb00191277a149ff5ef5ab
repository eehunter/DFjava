package com.oyosite.ticon.rawlib.core;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.oyosite.ticon.rawlib.creature.Caste;
import com.oyosite.ticon.rawlib.creature.CreatureType;
import com.oyosite.ticon.rawlib.item.Item;
import com.oyosite.ticon.rawlib.item.ItemEgg;
import com.oyosite.ticon.rawlib.material.MaterialType;
import com.oyosite.ticon.rawlib.material.MaterialTypeEggShell;
import com.oyosite.ticon.rawlib.material.MaterialTypeEggWhite;
import com.oyosite.ticon.rawlib.material.MaterialTypeEggYolk;
import com.oyosite.ticon.rawlib.unit.IUnit;

public class GameObjectRegistry {

	public static final Map<String, CreatureType> CREATURETYPES = new HashMap<String, CreatureType>();
	public static final ArrayList<Item> ITEMS = new ArrayList<Item>();
	public static final Map<String, MaterialType> MATERIALTYPES = new HashMap<String, MaterialType>();
	
	public static final Map<String, IUnit> UNITS = new HashMap<String, IUnit>(); 
	
	/**
	 * ONLY RUN ONCE PER RawStorageBase!
	 */
	public static void registerGameObjects(RawStorageBase raws) {
		//System.out.println(raws.gameDataCreatures.getDocumentElement().getTextContent());
		NodeList creatureNodes = raws.gameDataCreatures.getDocumentElement().getElementsByTagName("creature");
	    for(int i=0; i<creatureNodes.getLength(); i++) {
	    	String id = null, name = null, pluName = null, adjName = null;
			MaterialType shell_mat = new MaterialTypeEggShell(), yolk_mat = new MaterialTypeEggYolk(), white_mat = new MaterialTypeEggWhite();
	    	Map<String, Caste> castes = new HashMap<String, Caste>();
	    	boolean flier = false, sapient = false, playable = false;
	    	//System.out.println(creatureNodes.item(i).getTextContent());
	    	for (int j = 0; j<creatureNodes.item(i).getChildNodes().getLength(); j++) {
	    		//System.out.println(creatureNodes.item(i).getChildNodes().item(j).getTextContent());
	    		if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "id") {id = creatureNodes.item(i).getChildNodes().item(j).getTextContent();}
	    		if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "name") {name = creatureNodes.item(i).getChildNodes().item(j).getTextContent();}
	    		if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "pluName") {pluName = creatureNodes.item(i).getChildNodes().item(j).getTextContent();}
	    		if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "adjName") {adjName = creatureNodes.item(i).getChildNodes().item(j).getTextContent();}
	    		if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "flier") {flier = true;}
	    		if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "sapient") {sapient = true;}
	    		if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "playable") {playable = true;}
	    		if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "damage_limit") {}
	    		//if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "adjName") {}
	    		//System.out.println(id);
	    		if (creatureNodes.item(i).getChildNodes().item(j).getNodeName() == "caste") {
	    			NodeList casteNodes = creatureNodes.item(i).getChildNodes().item(j).getChildNodes();
	    			for (int k = 0; k<casteNodes.getLength(); k++) {
		    			//System.out.println(casteNodes.item(k).getTextContent());
	    				
		    				Caste caste = new Caste();
		    				String casteName = "";
		    				
		    				if (casteNodes.item(k).getNodeName() == "name") {casteName = casteNodes.item(k).getTextContent();/*System.out.println("Caste Name: "+casteName);*/}
		    				if (casteNodes.item(k).getNodeName() == "weight") {caste.setWeight(Integer.parseInt(casteNodes.item(k).getTextContent()));}
		    				if (casteNodes.item(k).getNodeName() == "flier") {caste.setFlier(true);}
		    	    		if (casteNodes.item(k).getNodeName() == "sapient") {caste.setSapient(true);}
		    	    		if (casteNodes.item(k).getNodeName() == "playable") {caste.setPlayable(true);}
		    	    		if (casteNodes.item(k).getNodeName() == "restricted") {caste.setRestricted(Integer.parseInt(casteNodes.item(k).getTextContent()));}
		    				if (casteNodes.item(k).getNodeName() == "female") {
		    					//System.out.println(casteNodes.item(k).getChildNodes().getLength());
		    					for (int l = 0; l < casteNodes.item(k).getChildNodes().getLength(); l++) {
		    						if (casteNodes.item(k).getChildNodes().item(l).getNodeName() == "lays_eggs") {
		    							NodeList eggNodes = casteNodes.item(k).getChildNodes().item(l).getChildNodes();
		    							for (int m = 0; m<eggNodes.getLength(); m++) {
		    								if (eggNodes.item(m).getNodeName() == "shell_mat") {parseMaterialNodes(shell_mat, eggNodes.item(m), raws);}
		    								if (eggNodes.item(m).getNodeName() == "yolk_mat") {parseMaterialNodes(yolk_mat, eggNodes.item(m), raws);}
		    								if (eggNodes.item(m).getNodeName() == "white_mat") {parseMaterialNodes(white_mat, eggNodes.item(m), raws);}
		    								
		    								
		    								
		    								
		    							}
		    				    		ItemEgg egg = new ItemEgg(id, name, pluName, adjName, shell_mat, yolk_mat, white_mat);
		    				    		caste.setEggItem(egg);
		    						}
		    						if (casteNodes.item(k).getChildNodes().item(l).getNodeName() == "g_time") caste.g_length = Integer.parseInt(casteNodes.item(k).getChildNodes().item(l).getTextContent());
		    						if (casteNodes.item(k).getChildNodes().item(l).getNodeName() == "i_time") caste.i_length = Integer.parseInt(casteNodes.item(k).getChildNodes().item(l).getTextContent());
		    						//System.out.println(caste.i_length);
		    						//System.out.println(casteNodes.item(k).getChildNodes().item(l).getNodeName());
		    					}
		    					//System.out.println(casteNodes.item(k).getNodeName());
		    				}
		    				castes.put(casteName, caste);
	    				
	    				
	    			}
	    		}
	    		
	    	}
	    	try {
	    		CreatureType type = new CreatureType(id, name, pluName, adjName);
	    		type.flier = flier;
	    		type.sapient = sapient;
	    		type.playable = playable;
	    		castes.forEach((k, v)->{if (v.getEggItem() != null) v.getEggItem().setCreatureType(type);});
	    		castes.forEach((k, v)->type.addCaste(k, v));
	    		CREATURETYPES.put(id, type);
	    		//System.out.println(id);
	    	}catch(Exception e) {e.printStackTrace();}
	    }
		
	}
	
	public static void parseMaterialNodes(MaterialType toBeParsed, Node node, RawStorageBase raws) {
		Document doc = raws.builder.newDocument();
		NodeList nodes = node.getChildNodes();
		for(int i = 0; i < nodes.getLength(); i++) {
			if (nodes.item(i).getNodeName() == "template") {
				NodeList tempNodes = invokeTemplate(raws, nodes.item(i).getTextContent(), node.getNodeName());
				try{for(int j = 0; j < tempNodes.getLength(); j++) {
					doc.importNode(tempNodes.item(j), true);
				}}catch(Exception e) {}
			}else {doc.importNode(nodes.item(i), true);}
		}
		
		for (int i = 0; i < doc.getChildNodes().getLength(); i++) {
			if (doc.getChildNodes().item(i).getNodeName() == "melt_point") {toBeParsed.meltingPoint = Integer.parseInt(doc.getChildNodes().item(i).getTextContent());}
			if (doc.getChildNodes().item(i).getNodeName() == "boil_point") {toBeParsed.boilingPoint = Integer.parseInt(doc.getChildNodes().item(i).getTextContent());}
			if (doc.getChildNodes().item(i).getNodeName() == "fireproof") {toBeParsed.heatDamagePoint = Integer.parseInt(doc.getChildNodes().item(i).getTextContent());}
			if (doc.getChildNodes().item(i).getNodeName() == "") {}
			if (doc.getChildNodes().item(i).getNodeName() == "") {}
			if (doc.getChildNodes().item(i).getNodeName() == "") {}
			if (doc.getChildNodes().item(i).getNodeName() == "") {}
			if (doc.getChildNodes().item(i).getNodeName() == "") {}
		}
		
		
		
	}
	
	public static NodeList invokeTemplate(RawStorageBase raws, String templateName, String templateItem) {
		for(int i=0; i<raws.gameDataTemplates.getDocumentElement().getChildNodes().getLength(); i++) {
			try{if (getNode(raws.gameDataTemplates.getDocumentElement().getChildNodes().item(i).getChildNodes(), "name").getTextContent() == templateName) {
				return getNode(raws.gameDataTemplates.getDocumentElement().getChildNodes().item(i).getChildNodes(), templateItem).getChildNodes();
			}}catch(Exception e) {}
		}
		
		return null;
		
	}
	
	public static Node getNode(NodeList nodeList, String name) {
		for(int i=0; i<nodeList.getLength(); i++) {
			if (nodeList.item(i).getNodeName() == name) return nodeList.item(i);
		}
		return null;
		
	}
}
